/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import Seriales.SerialEvento;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import paqueteActividad.Evento;
import static ventanas.pTareas.insertString;
/**
 *
 * @author 4dominic888
 */
public class pEventos extends javax.swing.JPanel {

    /**
     * Creates new form pEventos
     */
    public pEventos() {
        initComponents();
        MenuContextualEvento.setVisible(false);
        
        OpcionAgregarEvento.setText("Agregar Evento");
        OpcionEditarEvento.setText("Editar Evento");
        OpcionMostrarEvento.setText("Mostrar Evento");
        OpcionEliminarEvento.setText("Eliminar Evento");
    }
    private DefaultListModel modelo = new DefaultListModel();
    private String eventoSeleccionado;
    private ArrayList<Evento> eventos = new ArrayList<>();
    private FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo Lista Eventos | *.COZEvento", "COZEvento");
    
    private static final String BOLD_FORMAT = "<html><span style='font-weight: bold;'>%s</span><html>";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuContextualEvento = new javax.swing.JPopupMenu();
        OpcionAgregarEvento = new javax.swing.JMenuItem();
        OpcionMostrarEvento = new javax.swing.JMenuItem();
        OpcionEditarEvento = new javax.swing.JMenuItem();
        OpcionEliminarEvento = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaEventos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnExportar = new javax.swing.JButton();
        btnImportar = new javax.swing.JButton();

        MenuContextualEvento.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                MenuContextualEventoPopupMenuWillBecomeVisible(evt);
            }
        });

        OpcionAgregarEvento.setText("jMenuItem1");
        OpcionAgregarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpcionAgregarEventoActionPerformed(evt);
            }
        });
        MenuContextualEvento.add(OpcionAgregarEvento);

        OpcionMostrarEvento.setText("jMenuItem1");
        OpcionMostrarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpcionMostrarEventoActionPerformed(evt);
            }
        });
        MenuContextualEvento.add(OpcionMostrarEvento);

        OpcionEditarEvento.setText("jMenuItem1");
        OpcionEditarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpcionEditarEventoActionPerformed(evt);
            }
        });
        MenuContextualEvento.add(OpcionEditarEvento);

        OpcionEliminarEvento.setText("jMenuItem1");
        OpcionEliminarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpcionEliminarEventoActionPerformed(evt);
            }
        });
        MenuContextualEvento.add(OpcionEliminarEvento);

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(51, 51, 51));
        setToolTipText("");
        setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));

        ListaEventos.setBackground(new java.awt.Color(204, 204, 204));
        ListaEventos.setForeground(new java.awt.Color(0, 0, 0));
        ListaEventos.setComponentPopupMenu(MenuContextualEvento);
        ListaEventos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListaEventosMousePressed(evt);
            }
        });
        ListaEventos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListaEventosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ListaEventos);

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 450, 630);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Lista de Eventos");
        add(jLabel1);
        jLabel1.setBounds(10, 10, 250, 40);

        btnExportar.setBackground(new java.awt.Color(204, 204, 204));
        btnExportar.setForeground(new java.awt.Color(0, 0, 0));
        btnExportar.setText("Exportar Lista de Eventos");
        btnExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnExportarMousePressed(evt);
            }
        });
        add(btnExportar);
        btnExportar.setBounds(480, 50, 240, 40);

        btnImportar.setBackground(new java.awt.Color(204, 204, 204));
        btnImportar.setForeground(new java.awt.Color(0, 0, 0));
        btnImportar.setText("Importar Lista de Eventos");
        btnImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnImportarMousePressed(evt);
            }
        });
        add(btnImportar);
        btnImportar.setBounds(480, 100, 240, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void ListaEventosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListaEventosValueChanged
        eventoSeleccionado = ListaEventos.getSelectedValue();
    }//GEN-LAST:event_ListaEventosValueChanged

    private void MenuContextualEventoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_MenuContextualEventoPopupMenuWillBecomeVisible
        if(eventoSeleccionado != null){
            OpcionEditarEvento.setEnabled(true);
            OpcionEliminarEvento.setEnabled(true);
            OpcionMostrarEvento.setEnabled(true);
            OpcionAgregarEvento.setEnabled(false);
        }
        else{
            OpcionEditarEvento.setEnabled(false);
            OpcionEliminarEvento.setEnabled(false);
            OpcionMostrarEvento.setEnabled(false);
            OpcionAgregarEvento.setEnabled(true);
        }
    }//GEN-LAST:event_MenuContextualEventoPopupMenuWillBecomeVisible

    private void ListaEventosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaEventosMousePressed
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    evt.consume();
                    ListaEventos.clearSelection();
            }
    }//GEN-LAST:event_ListaEventosMousePressed

    private boolean eventoNombreRepetido(String nombre){
        for (Evento tarea : eventos) if(tarea.getNombre().equals(nombre)) return true;
        return false;
    }
    
    private String formatoString(String text){
        String retorno = text;
        int cantidad = 0;
        while(true){
            cantidad += 56;
            if(cantidad >= text.length()) break;
            retorno = insertString(retorno, "-\n", cantidad);
        }
        return retorno;
    }
    
    private Evento obtenerEventoConNombre(String nombre){
        for (Evento evento : eventos) if(evento.getNombre().equals(nombre)) return evento;
        return null;
    }
    
    private void OpcionAgregarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpcionAgregarEventoActionPerformed
        vEvento ventanaAgregar = new vEvento();
        ventanaAgregar.setVisible(true);
        ventanaAgregar.btnCRUD.setText("Agregar");
        
        ventanaAgregar.btnCRUD.addActionListener(new java.awt.event.ActionListener(){
            
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt){
                
        Evento evento;
        
        if(ventanaAgregar.txtNombreEvento.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "El nombre del evento está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        if(eventoNombreRepetido(ventanaAgregar.txtNombreEvento.getText().trim())) { JOptionPane.showMessageDialog(null, "El nombre del evento ya existe, elija otro", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        if(Integer.parseInt(ventanaAgregar.spnPrioridad.getValue().toString()) < 0 ) { JOptionPane.showMessageDialog(null, "La prioridad no puede ser negativa", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        if(ventanaAgregar.txtDescripcion.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "La descripción está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        if(ventanaAgregar.txtLugar.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "El lugar está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        
        evento = new Evento(ventanaAgregar.txtNombreEvento.getText(), Integer.parseInt(ventanaAgregar.spnPrioridad.getValue().toString()), ventanaAgregar.txtDescripcion.getText(), ventanaAgregar.tgbtnCompletado.isSelected(), ventanaAgregar.fechaInicial.getDate(), ventanaAgregar.fechaFinal.getDate(), ventanaAgregar.txtLugar.getText());
        
        if(evento.duracionEvento('d') <= 0) { JOptionPane.showMessageDialog(null, "La duración del evento no es válida", "Evento", JOptionPane.WARNING_MESSAGE); return;}
        eventos.add(evento);
        String nombreEvento = ventanaAgregar.tgbtnCompletado.isSelected() ? String.format(BOLD_FORMAT, ventanaAgregar.txtNombreEvento.getText()) : ventanaAgregar.txtNombreEvento.getText();
        modelo.addElement(nombreEvento);
        ListaEventos.setModel(modelo);
        
        
        ventanaAgregar.txtNombreEvento.setText("");
        ventanaAgregar.txtDescripcion.setText("");
        ventanaAgregar.txtLugar.setText("");
        ventanaAgregar.fechaInicial.setDate(new Date());
        ventanaAgregar.fechaFinal.setDate(new Date());
        ventanaAgregar.spnPrioridad.setValue(0);
        ventanaAgregar.tgbtnCompletado.setSelected(false);
        eventoSeleccionado = null;
        ListaEventos.clearSelection();
        ventanaAgregar.dispose();
        }});
    }//GEN-LAST:event_OpcionAgregarEventoActionPerformed

    private void OpcionMostrarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpcionMostrarEventoActionPerformed
        Evento verEvento = new Evento();
        if(obtenerEventoConNombre(eventoSeleccionado) == null){
            String nombreTarea = eventoSeleccionado.substring(39);
            char[] temporal = nombreTarea.toCharArray();
            int count = 0;
            for (char c : temporal) {
                if(c == '<') break;
                else count++;
            }
            nombreTarea = nombreTarea.substring(0, count);
            verEvento = obtenerEventoConNombre(nombreTarea);
        }
        else verEvento = obtenerEventoConNombre(eventoSeleccionado);

        String completado = verEvento.isCompletado() ? "Este evento fue completado" : "Este evento no fue completado";
        
        String estadoDelEvento;
        if(verEvento.duracionEventoInicio('d') > 0){
            estadoDelEvento = "Quedan " + verEvento.duracionEventoInicio('d') + " Días para que comience el evento";
        }
        else if(verEvento.duracionEventoFin('d') > 0){
            estadoDelEvento = "Quedan " + verEvento.duracionEventoFin('d') + " Días para que termine el evento";           
        }
        else{
            estadoDelEvento = "Este evento ha finalizado";            
        }
        
        
        if(verEvento != null)JOptionPane.showMessageDialog(null,
                
                "[" + verEvento.getNombre() + "]\n"
              + "Importancia: " + verEvento.getPrioridad() + "\n\n"
              + "Descripción:\n" + formatoString(verEvento.getDescripcion()) + "\n\n"
              + completado + "\n\n"
              + "Duración del evento: " + verEvento.duracionEvento('d') + "días \n\n"
              + "Lugar: " + verEvento.getLugar() + "\n\n"
              + estadoDelEvento,
                "Evento", JOptionPane.INFORMATION_MESSAGE);

        else JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar mostrar la tarea", "Evento", JOptionPane.WARNING_MESSAGE);
        ListaEventos.clearSelection();
        
    }//GEN-LAST:event_OpcionMostrarEventoActionPerformed

    private void OpcionEliminarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpcionEliminarEventoActionPerformed
        Evento eliminarEvento = new Evento();
        
        if(obtenerEventoConNombre(eventoSeleccionado) == null){
            String nombreTarea = eventoSeleccionado.substring(39);
            char[] temporal = nombreTarea.toCharArray();
            int count = 0;
            for (char c : temporal) {
                if(c == '<') break;
                else count++;
            }
            nombreTarea = nombreTarea.substring(0, count);
            eliminarEvento = obtenerEventoConNombre(nombreTarea);
        }
        else eliminarEvento = obtenerEventoConNombre(eventoSeleccionado);
        
        String[] arreglo = {"Si", "No"};
        
        int opcion = JOptionPane.showOptionDialog(null, "¿Desea eliminar este evento?", "Evento", 
                0, JOptionPane.QUESTION_MESSAGE, null , arreglo, "");
        
        if(opcion == 0){
            
            eventos.remove(eliminarEvento);
            modelo.removeElement(eventoSeleccionado);
            ListaEventos.setModel(modelo);
        }
        ListaEventos.clearSelection();
        
    }//GEN-LAST:event_OpcionEliminarEventoActionPerformed

    private void OpcionEditarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpcionEditarEventoActionPerformed
        if(eventoSeleccionado != null){
            Evento editarEvento = new Evento();
            
            if(obtenerEventoConNombre(eventoSeleccionado) == null){
                
              String nombreTarea = eventoSeleccionado.substring(39);
              char[] temporal = nombreTarea.toCharArray();
              int count = 0;
            for (char c : temporal) {
                if(c == '<') break;
                else count++;
            }
            nombreTarea = nombreTarea.substring(0, count);
            editarEvento = obtenerEventoConNombre(nombreTarea);
        }
        else editarEvento = obtenerEventoConNombre(eventoSeleccionado);     
            
            int indiceEventoLista = ListaEventos.getSelectedIndex();
            vEvento ventanaEditar = new vEvento();
            ventanaEditar.show(true);
            ventanaEditar.btnCRUD.setText("Editar");
            ventanaEditar.txtNombreEvento.setText(editarEvento.getNombre());
            ventanaEditar.spnPrioridad.setValue(editarEvento.getPrioridad());
            ventanaEditar.txtDescripcion.setText(editarEvento.getDescripcion());
            ventanaEditar.tgbtnCompletado.setSelected(editarEvento.isCompletado());
            ventanaEditar.fechaInicial.setDate(editarEvento.getFechaInicio());
            ventanaEditar.fechaFinal.setDate(editarEvento.getFechaFinal());
            ventanaEditar.txtLugar.setText(editarEvento.getLugar());
            ventanaEditar.setEditarTarea(editarEvento);
            
            ventanaEditar.btnCRUD.addActionListener(new java.awt.event.ActionListener(){
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                   
                 String nombreEventoAnterior = ventanaEditar.getEditarEvento().getNombre();
                 int indiceCambiar = eventos.indexOf(ventanaEditar.getEditarEvento());
                 
                 Evento nuevoEvento = new Evento();
                 
                 if(ventanaEditar.txtNombreEvento.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "El nombre del evento está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                 if(!ventanaEditar.txtNombreEvento.getText().trim().equals(nombreEventoAnterior)){
                    if(eventoNombreRepetido(ventanaEditar.txtNombreEvento.getText().trim())) { JOptionPane.showMessageDialog(null, "El nombre del evento ya existe, elija otro", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                 }
                 if(Integer.parseInt(ventanaEditar.spnPrioridad.getValue().toString()) < 0 ) { JOptionPane.showMessageDialog(null, "La prioridad no puede ser negativa", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                 if(ventanaEditar.txtDescripcion.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "La descripción está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                 if(ventanaEditar.txtLugar.getText().trim().equals("")) { JOptionPane.showMessageDialog(null, "El lugar está vacía", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                 nuevoEvento = new Evento(ventanaEditar.txtNombreEvento.getText(), Integer.parseInt(ventanaEditar.spnPrioridad.getValue().toString()), ventanaEditar.txtDescripcion.getText(), ventanaEditar.tgbtnCompletado.isSelected(), ventanaEditar.fechaInicial.getDate(), ventanaEditar.fechaFinal.getDate(), ventanaEditar.txtLugar.getText());
                 if(nuevoEvento.duracionEvento('d') <= 0) { JOptionPane.showMessageDialog(null, "La duración del evento no es válida", "Evento", JOptionPane.WARNING_MESSAGE); return;}
                     
                 String nombreEvento = ventanaEditar.tgbtnCompletado.isSelected() ? String.format(BOLD_FORMAT, ventanaEditar.txtNombreEvento.getText()) : ventanaEditar.txtNombreEvento.getText();
                 
                 eventos.set(indiceCambiar, nuevoEvento);
                 modelo.setElementAt(nombreEvento, indiceEventoLista);
                 ListaEventos.setModel(modelo);
                 
                 ventanaEditar.txtNombreEvento.setText("");
                 ventanaEditar.txtDescripcion.setText("");
                 ventanaEditar.txtLugar.setText("");
                 ventanaEditar.fechaInicial.setDate(new Date());
                 ventanaEditar.fechaFinal.setDate(new Date());
                 ventanaEditar.spnPrioridad.setValue(0);
                 ventanaEditar.tgbtnCompletado.setSelected(false);
                 eventoSeleccionado = null;
                 ListaEventos.clearSelection();
                 ventanaEditar.dispose();
                 }});
            
        }
    }//GEN-LAST:event_OpcionEditarEventoActionPerformed

    
    
    private void btnExportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportarMousePressed
        JFileChooser guardar = new JFileChooser();
        guardar.setFileFilter(filter);
        int opcion = guardar.showSaveDialog(this);
        if(opcion == JFileChooser.APPROVE_OPTION){
            String path = guardar.getSelectedFile().getPath()+".COZEvento";
           
            try {
                ObjectOutputStream save = new ObjectOutputStream(new FileOutputStream(path));
                SerialEvento objeto = new SerialEvento((DefaultListModel)ListaEventos.getModel(), eventos);
                save.writeObject(objeto);
                save.close();
            } catch (Exception e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Sucedió algo a la hora de exportar la lista de eventos", "Error al guardar", JOptionPane.WARNING_MESSAGE);
            }        
        }
    }//GEN-LAST:event_btnExportarMousePressed

    private void btnImportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImportarMousePressed
        JFileChooser cargar = new JFileChooser();
        cargar.setFileFilter(filter);
        int opcion = cargar.showOpenDialog(this);
        if(opcion == JFileChooser.APPROVE_OPTION){
            String path = cargar.getSelectedFile().toString();
        
            try {
                ObjectInputStream load = new ObjectInputStream(new FileInputStream(path));
                SerialEvento retorno = (SerialEvento)load.readObject();
                modelo = retorno.getModelo();
                ListaEventos.setModel(modelo);
                eventos = retorno.getEventos();
                ListaEventos.clearSelection();
                load.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Sucedió algo a la hora de importar la lista de eventos\n" + e, "Error al cargar", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnImportarMousePressed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListaEventos;
    private javax.swing.JPopupMenu MenuContextualEvento;
    private javax.swing.JMenuItem OpcionAgregarEvento;
    private javax.swing.JMenuItem OpcionEditarEvento;
    private javax.swing.JMenuItem OpcionEliminarEvento;
    private javax.swing.JMenuItem OpcionMostrarEvento;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
